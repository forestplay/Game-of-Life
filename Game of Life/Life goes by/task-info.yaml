type: edu
custom_name: stage3
files:
- name: test/GameOfLifeTest.java
  visible: false
  text: |2

    import common.GameOfLifeStage3Test;

    public class GameOfLifeTest extends GameOfLifeStage3Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun fail(message: String) = CheckResult(false, message)  // TODO: add to repo
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeStage3Test.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.stage.BaseStageTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.Main

    abstract class GameOfLifeStage3Test : BaseStageTest<ClueWithChecker>(Main::class.java) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            // two times:
            return (5..MAX_SIZE).flatMap(::stage3Tests) + (5..MAX_SIZE).flatMap(::stage3Tests)
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }

        companion object {
            const val MAX_SIZE = 10
        }
    }

    fun stage3Tests(universeSize: Int): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest("$universeSize\n") { reply ->
                    @Suppress("FoldInitializerAndIfToElvis")
                    val generations = reply
                            .toLowerCase()
                            .lines()
                            .filter { it.isNotEmpty() }
                            .joinToString("\n")
                            .split("generation".toRegex())
                            .drop(1)
                            .map {
                                val lines = it.lines()
                                val (idString, aliveString) = lines
                                val map = lines.drop(2)

                                if (!map.canBeMap(universeSize)) {
                                    return@createDynamicFeedbackTest fail("Can't read map in:\n$it\n")
                                }

                                val id = intRegex.find(idString)?.groupValues?.firstOrNull()?.toInt()
                                if (id == null) {
                                    return@createDynamicFeedbackTest fail("Can't find generation ID:\n$it\n")
                                }

                                val alive = intRegex.find(aliveString)?.groupValues?.firstOrNull()?.toInt()
                                if (alive == null) {
                                    return@createDynamicFeedbackTest fail("Can't find alive count:\n$it\n")
                                }

                                val generation = Generation(id, alive, map)
                                val aliveOnMap = generation.aliveOnMap(universeSize)

                                if (aliveOnMap != alive) {
                                    return@createDynamicFeedbackTest fail(
                                            "Alive count is wrong ($alive expected, $aliveOnMap got):\n$it\n"
                                    )
                                }

                                return@map generation
                            }

                    if (generations.isEmpty()) {
                        return@createDynamicFeedbackTest fail("Your program doesn't output generations for size $universeSize")
                    }

                    if (generations.first().id != 1) {
                        return@createDynamicFeedbackTest fail("First generation has number ${generations.first().id}")
                    }

                    val diffs = generations.windowed(2)

                    diffs.forEach { (prev, next) ->
                        if (prev.id + 1 != next.id) {
                            return@createDynamicFeedbackTest fail("ID of the generation #${prev.id + 1} is wrong (${next.id})")
                        }

                        if (!prev.evolvesTo(next, universeSize)) {
                            return@createDynamicFeedbackTest fail("Wrong evolution from #${prev.id} to #${prev.id + 1}")
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }

    val intRegex = """(\d)+""".toRegex()

    fun List<String>.canBeMap(universeSize: Int): Boolean {
        if (this.size < universeSize) {
            return false
        }

        return this.take(universeSize).all { it.length >= universeSize }
    }

    data class Generation(val id: Int, val alive: Int, val map: List<String>) {
        fun aliveOnMap(universeSize: Int): Int {
            return (0 until universeSize)
                    .flatMap { y -> (0 until universeSize).map { x -> x to y } }
                    .map { (x, y) -> map[x][y] }
                    .count { it.isAlive() }
        }

        fun evolvesTo(other: Generation, universeSize: Int): Boolean {
            return (0 until universeSize)
                    .flatMap { y -> (0 until universeSize).map { x -> x to y } }
                    .map { (x, y) ->
                        if (map[x][y].isAlive()) {
                            if (aliveNeighbours(x, y, universeSize) in setOf(2, 3)) {
                                other.map[x][y].isAlive()
                            } else {
                                !other.map[x][y].isAlive()
                            }
                        } else {
                            if (aliveNeighbours(x, y, universeSize) == 3) {
                                other.map[x][y].isAlive()
                            } else {
                                !other.map[x][y].isAlive()
                            }
                        }
                    }
                    .all { it }
        }

        fun aliveNeighbours(x: Int, y: Int, universeSize: Int): Int {
            var north = x - 1
            if (north < 0) north = universeSize - 1
            var south = x + 1
            if (south > universeSize - 1) south = 0
            var west = y - 1
            if (west < 0) west = universeSize - 1
            var east = y + 1
            if (east > universeSize - 1) east = 0

            var aliveNeighbours = 0
            if (map[north][west].isAlive()) ++aliveNeighbours
            if (map[north][y].isAlive()) ++aliveNeighbours
            if (map[north][east].isAlive()) ++aliveNeighbours
            if (map[x][west].isAlive()) ++aliveNeighbours
            if (map[x][east].isAlive()) ++aliveNeighbours
            if (map[south][west].isAlive()) ++aliveNeighbours
            if (map[south][y].isAlive()) ++aliveNeighbours
            if (map[south][east].isAlive()) ++aliveNeighbours

            return aliveNeighbours
        }

        fun Char.isAlive(): Boolean = this != ' '
    }
  learner_created: false
- name: src/life/Main.java
  visible: true
  text: |-
    package life;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            final int universeSize = scanner.nextInt();
            final long seed = scanner.nextInt();
            final int generationAmount = scanner.nextInt();

            if (universeSize > 0 && generationAmount >= 0) {
                Universe universe = new Universe(universeSize, seed);
                for (int i = 0; i < generationAmount; i++) {
                    universe.nextGeneration();
                }
                universe.showUniverse();
            } else if (universeSize <= 0) {
                System.err.println("Error! Universe size can't be negative or 0!");
            } else {
                System.err.println("Error! Number of generations can't be negative!");
            }
        }
    }
  learner_created: false
- name: src/life/Universe.java
  visible: true
  text: |-
    package life;

    public class Universe {
        private final int size;
        private final GenerationAlgorithm genAlg;
        private boolean[][] map;

        /**
         * Constructor which create universe instantly with first generation.
         * @param size of the universe
         * @param randomSeed of random engine class
         */
        Universe(int size, long randomSeed) {
            this.size = size;
            genAlg = new GenerationAlgorithm(randomSeed);
            map = genAlg.generateMap(size);
        }

        /**
         * Method to find next generations.
         */
        public void nextGeneration() {
            map = genAlg.computeNextGeneration(map);
        }

        /**
         * Map printing method.
         */
        public void showUniverse() {
            if (size <= 0) {
                System.err.println("Universe size must be more than 0!");
            } else {
                for (boolean[] row : map) {
                    for (boolean cell : row) {
                        if (cell) {
                            System.out.print("O");
                        } else {
                            System.out.print(" ");
                        }
                    }
                    System.out.println();
                }
            }
        }

    }
  learner_created: false
- name: src/life/Generation.java
  visible: true
  text: |
    package life;

    import java.util.Random;

    public class Generation {
        public static Universe randomNext(Universe firstGen) {
            Random random = new Random(System.currentTimeMillis());
            return new Universe(firstGen.getSize(), random.nextLong());
        }

        public static Universe next(Universe firstGen) {
            Universe nextGen = new Universe(firstGen.getSize());

            for (int x = 0; x < firstGen.getSize(); x++) {
                for (int y = 0; y < firstGen.getSize(); y++) {
                    int neighbors = firstGen.countNeighbors(x, y);
                    if (neighbors == 2 && firstGen.getCell(x, y)) {
                        nextGen.setCell(x, y, Universe.ALIVE);
                    } else if (neighbors == 3) {
                        nextGen.setCell(x, y, Universe.ALIVE);
                    } else if (neighbors < 2 || neighbors > 3) {
                        nextGen.setCell(x, y, Universe.DEAD);
                    }
                }
            }

            return nextGen;
        }

    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/54/stages/296/implement
status: Solved
record: 3
